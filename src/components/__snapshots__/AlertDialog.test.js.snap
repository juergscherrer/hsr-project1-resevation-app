// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<AlertDialog /> should render correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <AlertDialog
    handleAnswer={[Function]}
    open="true"
    text="Test Text"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <WithStyles(Dialog)
        aria-describedby="alert-dialog-description"
        aria-labelledby="alert-dialog-title"
        onClose={[Function]}
        open="true"
      >
        <WithStyles(DialogContent)>
          <WithStyles(DialogContentText)
            id="alert-dialog-description"
          >
            Test Text
          </WithStyles(DialogContentText)>
        </WithStyles(DialogContent)>
        <WithStyles(DialogActions)>
          <WithStyles(Button)
            color="primary"
            id="no"
            onClick={[Function]}
          >
            Nein
          </WithStyles(Button)>
          <WithStyles(Button)
            autoFocus={true}
            color="primary"
            id="yes"
            onClick={[Function]}
          >
            Ja
          </WithStyles(Button)>
        </WithStyles(DialogActions)>
      </WithStyles(Dialog)>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "aria-describedby": "alert-dialog-description",
        "aria-labelledby": "alert-dialog-title",
        "children": Array [
          <WithStyles(DialogContent)>
            <WithStyles(DialogContentText)
              id="alert-dialog-description"
            >
              Test Text
            </WithStyles(DialogContentText)>
          </WithStyles(DialogContent)>,
          <WithStyles(DialogActions)>
            <WithStyles(Button)
              color="primary"
              id="no"
              onClick={[Function]}
            >
              Nein
            </WithStyles(Button)>
            <WithStyles(Button)
              autoFocus={true}
              color="primary"
              id="yes"
              onClick={[Function]}
            >
              Ja
            </WithStyles(Button)>
          </WithStyles(DialogActions)>,
        ],
        "onClose": [Function],
        "open": "true",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <WithStyles(DialogContentText)
              id="alert-dialog-description"
            >
              Test Text
            </WithStyles(DialogContentText)>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Test Text",
              "id": "alert-dialog-description",
            },
            "ref": null,
            "rendered": "Test Text",
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <WithStyles(Button)
                color="primary"
                id="no"
                onClick={[Function]}
              >
                Nein
              </WithStyles(Button)>,
              <WithStyles(Button)
                autoFocus={true}
                color="primary"
                id="yes"
                onClick={[Function]}
              >
                Ja
              </WithStyles(Button)>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Nein",
                "color": "primary",
                "id": "no",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": "Nein",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "autoFocus": true,
                "children": "Ja",
                "color": "primary",
                "id": "yes",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": "Ja",
              "type": [Function],
            },
          ],
          "type": [Function],
        },
      ],
      "type": [Function],
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <WithStyles(Dialog)
          aria-describedby="alert-dialog-description"
          aria-labelledby="alert-dialog-title"
          onClose={[Function]}
          open="true"
        >
          <WithStyles(DialogContent)>
            <WithStyles(DialogContentText)
              id="alert-dialog-description"
            >
              Test Text
            </WithStyles(DialogContentText)>
          </WithStyles(DialogContent)>
          <WithStyles(DialogActions)>
            <WithStyles(Button)
              color="primary"
              id="no"
              onClick={[Function]}
            >
              Nein
            </WithStyles(Button)>
            <WithStyles(Button)
              autoFocus={true}
              color="primary"
              id="yes"
              onClick={[Function]}
            >
              Ja
            </WithStyles(Button)>
          </WithStyles(DialogActions)>
        </WithStyles(Dialog)>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "aria-describedby": "alert-dialog-description",
          "aria-labelledby": "alert-dialog-title",
          "children": Array [
            <WithStyles(DialogContent)>
              <WithStyles(DialogContentText)
                id="alert-dialog-description"
              >
                Test Text
              </WithStyles(DialogContentText)>
            </WithStyles(DialogContent)>,
            <WithStyles(DialogActions)>
              <WithStyles(Button)
                color="primary"
                id="no"
                onClick={[Function]}
              >
                Nein
              </WithStyles(Button)>
              <WithStyles(Button)
                autoFocus={true}
                color="primary"
                id="yes"
                onClick={[Function]}
              >
                Ja
              </WithStyles(Button)>
            </WithStyles(DialogActions)>,
          ],
          "onClose": [Function],
          "open": "true",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <WithStyles(DialogContentText)
                id="alert-dialog-description"
              >
                Test Text
              </WithStyles(DialogContentText)>,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Test Text",
                "id": "alert-dialog-description",
              },
              "ref": null,
              "rendered": "Test Text",
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <WithStyles(Button)
                  color="primary"
                  id="no"
                  onClick={[Function]}
                >
                  Nein
                </WithStyles(Button)>,
                <WithStyles(Button)
                  autoFocus={true}
                  color="primary"
                  id="yes"
                  onClick={[Function]}
                >
                  Ja
                </WithStyles(Button)>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "Nein",
                  "color": "primary",
                  "id": "no",
                  "onClick": [Function],
                },
                "ref": null,
                "rendered": "Nein",
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "autoFocus": true,
                  "children": "Ja",
                  "color": "primary",
                  "id": "yes",
                  "onClick": [Function],
                },
                "ref": null,
                "rendered": "Ja",
                "type": [Function],
              },
            ],
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
